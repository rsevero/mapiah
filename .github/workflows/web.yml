name: Mapiah Web Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      test_tag:
        description: 'Simulated tag for testing'
        required: false
        default: 'v1.0.0-test'

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate tag (automatic runs only)
      if: github.event_name == 'push'
      shell: bash
      run: |
        set -e
        set -x
        TAG=${GITHUB_REF#refs/tags/}
        if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid tag format: $TAG (must match vX.Y.Z)"
          exit 1
        fi
        echo "Validated tag: $TAG"

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: stable
        flutter-version: 3.32.5

    - name: Install dependencies
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: appstream appstream-util appstream-compose libappstream-glib8 clang cmake ninja-build pkg-config libgtk-3-dev libglu1-mesa
        version: 1.0

    - name: Build flutter app
      run: |
        set -e
        set -x
        flutter --version
        flutter config --enable-web
        flutter build web --release

    - name: Deploy web code to Server
      env:
        SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY_GITHUB_ACTION }}
      run: |
        set -e
        set -x
        echo $SSH_KEY | base64 -d > ssh-key

    - name: Setup upterm session
      uses: lhotari/action-upterm@v1
      with:
        limit-access-to-actor: true

    - name: Publish Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        set -e
        set -x
        TITLE="Mapiah $TAG"

        # Store token in a different variable and unset GITHUB_TOKEN
        GH_TOKEN=$GITHUB_TOKEN
        unset GITHUB_TOKEN

        # Authenticate using the stored token
        gh auth login --with-token <<< "$GH_TOKEN"

        # Check if release exists and create if needed
        if ! gh release view "$TAG" 2>/dev/null; then
          echo "Creating new release with flatpak..."
          gh release create "$TAG" \
            --title "$TITLE" \
            --notes "Release $TAG" \
            "$FLATPAK_INSTALLER"
        else
          echo "Release exists - uploading flatpak..."
          gh release upload "$TAG" \
            --clobber \
            "$FLATPAK_INSTALLER"
        fi

        echo "Uploading AppImage..."
        gh release upload "$TAG" \
            --clobber \
            "$INSTALLER_APPIMAGE"
