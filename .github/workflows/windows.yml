name: Mapiah Windows release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      test_tag:
        description: 'Simulated tag for testing'
        required: false
        default: 'v1.0.0-test'

permissions:
  contents: write

jobs:
  main:
    runs-on: windows-latest
    steps:
      # Only validate tag format for automatic runs
      - name: Validate tag (automatic runs only)
        if: github.event_name == 'push'
        shell: bash
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid tag format: $TAG (must match vX.Y.Z)"
            exit 1
          fi
          echo "Validated tag: $TAG"

      # Smart checkout - uses tag only for automatic runs
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'push' && github.ref || '' }}
          fetch-depth: 0

      - name: Debug checkout information
        shell: bash
        run: |
          echo "Trigger type: ${{ github.event_name }}"
          echo "Checked out SHA: ${{ github.sha }}"
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Using tag: ${GITHUB_REF#refs/tags/}"
          else
            echo "Using latest commit"
          fi

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.35.6

      - name: Show Flutter version
        run: flutter --version

      - name: Get dependencies
        run: flutter pub get

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Build Windows release
        run: flutter build windows --release

      - name: Install Inno Setup
        run: choco install innosetup -y

      - name: Prepare build directory
        shell: bash
        run: |
          mkdir -p build/windows-installer
          # Copy the ISS file to build directory for modification
          cp packaging/windows/mapiah.iss build/windows-installer/

      - name: Create Inno Setup installer
        shell: cmd
        run: |
          set BUILD_DIR=%GITHUB_WORKSPACE%\build\windows\x64\runner\Release
          set OUTPUT_DIR=%GITHUB_WORKSPACE%\build\windows-installer

          # Get the version from the built executable
          for /f "tokens=*" %%i in ('powershell -command "(Get-Item '%BUILD_DIR%\mapiah.exe').VersionInfo.ProductVersion"') do set APP_VERSION=%%i

          # Update paths in the ISS file
          powershell -Command "(Get-Content '%OUTPUT_DIR%\mapiah.iss') -replace 'C:\\mapiah\\build\\windows', '%GITHUB_WORKSPACE%\\build\\windows' | Set-Content '%OUTPUT_DIR%\mapiah.iss'"

          # Compile the installer
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "%OUTPUT_DIR%\mapiah.iss"

      - name: Publish Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          TAG="${{ github.event_name == 'push' && github.ref_name || github.event.inputs.test_tag }}"
          TITLE="Mapiah $TAG"
          INSTALLER="build/windows-installer/Mapiah-$TAG-windows-x64.exe"

          # Store token in a different variable and unset GITHUB_TOKEN
          GH_TOKEN=$GITHUB_TOKEN
          unset GITHUB_TOKEN

          # Authenticate using the stored token
          gh auth login --with-token <<< "$GH_TOKEN"

          # Check if release exists and create if needed
          if ! gh release view "$TAG" 2>/dev/null; then
            echo "Creating new release..."
            gh release create "$TAG" \
              --title "$TITLE" \
              --notes "Release $TAG" \
              "$INSTALLER"
          else
            echo "Release exists - uploading assets..."
            gh release upload "$TAG" \
              --clobber \
              "$INSTALLER"
          fi
