name: Mapiah Flatpak Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      test_tag:
        description: 'Simulated tag for testing'
        required: false
        default: 'v1.0.0-test'

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate tag (automatic runs only)
      if: github.event_name == 'push'
      shell: bash
      run: |
        set -e
        set -x
        TAG=${GITHUB_REF#refs/tags/}
        if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid tag format: $TAG (must match vX.Y.Z)"
          exit 1
        fi
        echo "Validated tag: $TAG"

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: stable
        flutter-version: 3.32.4

    - name: Install dependencies
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: appstream appstream-util appstream-compose flatpak flatpak-builder libappstream-glib8 clang cmake ninja-build pkg-config libgtk-3-dev libglu1-mesa
        version: 1.0

    - name: Build flutter app
      run: |
        set -e
        set -x
        flutter --version
        flutter config --enable-linux-desktop
        flutter build linux --release

    - name: Prepare Flatpak package
      run: |
        set -e
        set -x
        projectName=Mapiah
        projectId=org.mapiah.mapiah
        executableName=mapiah
        APP_DIR="app"

        mkdir -p "$APP_DIR/$projectName"
        cp -r build/linux/x64/release/bundle/* "$APP_DIR/$projectName/"
        chmod +x "$APP_DIR/$projectName/$executableName"
        mkdir -p "$APP_DIR/bin"
        ln -s "$APP_DIR/$projectName/$executableName" "$APP_DIR/bin/$executableName"

        iconDir="$APP_DIR/share/icons/hicolor/scalable/apps"
        mkdir -p "$iconDir"
        cp -r assets/icons/m-*.png "$iconDir/"

        desktopFileDir="$APP_DIR/share/applications"
        mkdir -p "$desktopFileDir"
        cp -r packaging/linux/flatpak/$projectId.desktop "$desktopFileDir/"

        metadataDir="$APP_DIR/share/metainfo"
        mkdir -p "$metadataDir"
        cp -r packaging/linux/$projectId.metainfo.xml "$metadataDir/"

        cp "packaging/linux/flatpak/built-locally/$projectId.yml" .

    - name: Install Flatpak Builder dependencies
      run: |
        set -e
        set -x
        sudo flatpak remote-add --system --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
        sudo flatpak install --system --noninteractive org.freedesktop.Sdk/x86_64/24.08
        sudo flatpak install --system --noninteractive flathub org.freedesktop.Platform/x86_64/24.08
        sudo flatpak install --system --noninteractive flathub org.freedesktop.Sdk.Extension.llvm19

    - name: Setup upterm session
      uses: lhotari/action-upterm@v1
      with:
        limit-access-to-actor: true

    - name: Build Mapiah flatpak
      run: |
        set -e
        set -x
        TAG="${{ github.event_name == 'push' && github.ref_name || github.event.inputs.test_tag }}"
        TAG_NUMBER="${TAG#v}"
        INSTALLER="Mapiah-${TAG_NUMBER}-linux-x86_64.flatpak"
        flatpak-builder --force-clean --repo=repo build-dir org.mapiah.mapiah.yml
        flatpak build-bundle repo "$INSTALLER" org.mapiah.mapiah

    - name: Publish Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        set -e
        set -x
        TAG="${{ github.event_name == 'push' && github.ref_name || github.event.inputs.test_tag }}"
        TAG_NUMBER="${TAG#v}"
        INSTALLER="Mapiah-${TAG_NUMBER}-linux-x86_64.flatpak"
        TITLE="Mapiah $TAG"

        # Store token in a different variable and unset GITHUB_TOKEN
        GH_TOKEN=$GITHUB_TOKEN
        unset GITHUB_TOKEN

        # Authenticate using the stored token
        gh auth login --with-token <<< "$GH_TOKEN"

        # Check if release exists and create if needed
        if ! gh release view "$TAG" 2>/dev/null; then
          echo "Creating new release..."
          gh release create "$TAG" \
            --title "$TITLE" \
            --notes "Release $TAG" \
            "$INSTALLER"
        else
          echo "Release exists - uploading assets..."
          gh release upload "$TAG" \
            --clobber \
            "$INSTALLER"
        fi
