workflows:
  build-macos:
    name: Build MacOS
    environment:
      flutter: 3.35.6
      xcode: latest
      cocoapods: default
      groups:
        - mapiah_github_token
      vars:
        MAPIAH_TAG_PARAM: "v0.2.5"

    triggering:
      events:
        - tag
      tag_patterns:
      - pattern: 'v+([0-9]).+([0-9]).+([0-9])'
        include: true

    scripts:
      - name: Set MAPIAH_TAG variable
        script: |
          set -e
          if [ -n "$CM_TAG" ]; then
            export MAPIAH_TAG="$CM_TAG"
          else
            export MAPIAH_TAG="$MAPIAH_TAG_PARAM"
          fi
          echo "MAPIAH_TAG=$MAPIAH_TAG" >> $CM_ENV
          echo "MAPIAH_TAG is: $MAPIAH_TAG"
          echo "MAPIAH_TAG_PARAM is: $MAPIAH_TAG_PARAM"

      - name: Set INSTALLER path
        script: |
          set -e
          export INSTALLER="build/macos/Mapiah-${MAPIAH_TAG}-macOS-universal.dmg"
          echo "INSTALLER=$INSTALLER" >> $CM_ENV
          echo "Defined INSTALLER as: $INSTALLER"

      - name: Get ´flutter pub´ dependencies
        script: |
          set -e
          flutter pub get

      - name: Enable MacOS build
        script: |
          set -e
          flutter config --enable-macos-desktop
          defaults write com.apple.dt.Xcode IDEPackageSupportUseBuiltinSCM YES

      - name: Build MacOS release
        script: |
          set -e
          flutter build macos --release

      - name: Create DMG
        script: |
          set -e
          brew install node
          npm install -g appdmg
          appdmg appdmg.json "$INSTALLER"

    # artifacts:
    #   - build/macos/Mapiah.dmg

    publishing:
      scripts:
      - name: Create GitHub Release with GH CLI
        script: |
          set -e
          # Store token in a different variable and unset GITHUB_TOKEN
          GH_TOKEN=$GITHUB_TOKEN
          unset GITHUB_TOKEN

          # Authenticate using the stored token
          gh auth login --with-token <<< "$GH_TOKEN"

          # Check if release exists and create if needed
          if ! gh release view "$MAPIAH_TAG" 2>/dev/null; then
            echo "Creating new release..."
            gh release create "$MAPIAH_TAG" \
              --title "$TITLE" \
              --notes "Release $MAPIAH_TAG" \
              "$INSTALLER"
          else
            echo "Release exists - uploading assets..."
            gh release upload "$MAPIAH_TAG" \
              --clobber \
              "$INSTALLER"
          fi
